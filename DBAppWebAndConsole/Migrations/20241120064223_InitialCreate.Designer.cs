// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241120064223_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("BodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BodyTypes");
                });

            modelBuilder.Entity("Car", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BodyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MarkId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Number");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PersonId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Malfunction", b =>
                {
                    b.Property<int>("IdMalfunction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("IdMalfunction");

                    b.ToTable("Malfunctions");
                });

            modelBuilder.Entity("Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("Master", b =>
                {
                    b.Property<int>("IdMaster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.Property<float?>("WorkRate")
                        .HasColumnType("REAL");

                    b.HasKey("IdMaster");

                    b.HasIndex("PersonId");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdMaster")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MasterIdMaster")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.HasKey("IdOrder");

                    b.HasIndex("MasterIdMaster");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderMalfunction", b =>
                {
                    b.Property<int>("IdOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdMalfunction")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdOrder", "IdMalfunction");

                    b.HasIndex("IdMalfunction");

                    b.ToTable("OrderMalfunctions");
                });

            modelBuilder.Entity("OrderSparePart", b =>
                {
                    b.Property<int>("IdOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdSparePart")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdOrder", "IdSparePart");

                    b.HasIndex("IdSparePart");

                    b.ToTable("OrderSpareParts");
                });

            modelBuilder.Entity("OrderWork", b =>
                {
                    b.Property<int>("IdOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdWork")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdOrder", "IdWork");

                    b.HasIndex("IdWork");

                    b.ToTable("OrderWorks");
                });

            modelBuilder.Entity("Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("IdPerson");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("SparePart", b =>
                {
                    b.Property<int>("IdSparePart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("IdSparePart");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("Work", b =>
                {
                    b.Property<int>("IdWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkDescription")
                        .HasColumnType("TEXT");

                    b.HasKey("IdWork");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Car", b =>
                {
                    b.HasOne("BodyType", "BodyType")
                        .WithMany()
                        .HasForeignKey("BodyTypeId");

                    b.HasOne("Mark", "Mark")
                        .WithMany()
                        .HasForeignKey("MarkId");

                    b.HasOne("Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("BodyType");

                    b.Navigation("Mark");

                    b.Navigation("Model");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Master", b =>
                {
                    b.HasOne("Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterIdMaster");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("OrderMalfunction", b =>
                {
                    b.HasOne("Malfunction", "Malfunction")
                        .WithMany()
                        .HasForeignKey("IdMalfunction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order", "Order")
                        .WithMany("OrderMalfunctions")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Malfunction");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderSparePart", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderSpareParts")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SparePart", "SparePart")
                        .WithMany()
                        .HasForeignKey("IdSparePart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("OrderWork", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderWorks")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Work", "Work")
                        .WithMany()
                        .HasForeignKey("IdWork")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderMalfunctions");

                    b.Navigation("OrderSpareParts");

                    b.Navigation("OrderWorks");
                });
#pragma warning restore 612, 618
        }
    }
}
